import { tmpdir } from 'os';
import { join } from 'path';
import { ensureDir, copy, move, writeFile, existsSync, readFileSync, remove } from 'fs-extra';
import { findNpm, installNpm } from '@midwayjs/command-core';
import * as globby from 'globby';
import * as uuid from 'uuid-1345';

import { AbstractPGO } from './common';

export class NodePGO extends AbstractPGO {

  async run() {
    const pkgJsonFIle = join(this.options.codeUri, 'package.json');
    if (!existsSync(pkgJsonFIle)) {
      console.log('无 package.json 文件，跳过 Alinode PGO 生成');
      return;
    }
    // 需要指定 index.initializer
    // 将用户代码拷贝到一个临时目录
    const pgoFunctionName = `nodePGOGen`;
    const tmpName = `${pgoFunctionName}-${Date.now()}`;
    const tmpDir = join(tmpdir(), tmpName);
    await ensureDir(tmpDir);

    const entry = this.options.initializer?.split('.');
    const module = entry?.[0] || 'index'
    const initializerFun = entry?.[1] || 'initializer'


    // 拷贝 pgo 工具库
    await copy(join(__dirname, '../resources/pgoCommonUtils.js'), join(this.options.codeUri, 'pgoCommonUtils.js'));
    // 将入口迁移
    const entryFile = join(this.options.codeUri, module + '.js');
    const entryOriginFile = join(this.options.codeUri, module + '_pgo_origin.js');
    if (!existsSync(entryOriginFile)) {
      await move(entryFile, join(this.options.codeUri, module + '_pgo_origin.js'));
      // 重写入口
      await writeFile(entryFile, `// Generated by Alibaba Node.js PGO
const pgo = require('./pgoCommonUtils.js');
pgo.start();
const originModule = require('./index_pgo_origin.js');
Object.assign(exports, originModule);
exports.${initializerFun} = async (context, callback) => {
  const originCallback = callback;
  callback = (...args) => {
    pgo.end();
    originCallback(...args);
  };
  if (originModule['${initializerFun}']) {
    originModule['${initializerFun}'](context, callback);
  } else {
    callback(null, '');
  }
};`);
    }

    // 拷贝所有文件
    const fileList = await globby(['**'], {
      onlyFiles: false,
      followSymbolicLinks: false,
      cwd: this.options.codeUri,
      ignore: [
        '**/node_modules/**'
      ],
    });

    await Promise.all(fileList.map(file => {
      const filePath = join(this.options.codeUri, file);
      const targetPath = join(tmpDir, file);
      return copy(filePath, targetPath);
    }));

    const targetRRC = join(tmpDir, 'require_cache.strrc');
    if (existsSync(targetRRC)) {
      await remove(targetRRC);
    }

    // 将 dryRun 写入入口文件
    const tmpEntry = join(tmpDir, module + '.js');
    await writeFile(tmpEntry, readFileSync(tmpEntry, 'utf-8') + `/* */exports.alinode_pgo_dry_run = (event, context, callback) => callback(null, pgo.info(event));`);
    // 安装production依赖
    // pnpm 会创建符号连接导致线上失败
    const { npm, registry } = findNpm({ npm: 'npm' });
    await installNpm({
      baseDir: tmpDir,
      register: npm,
      registerPath: registry,
      mode: ['production']
    });

    // 打包生成zip
    console.log('PGO tmp function zipping...')
    const tmpZipFile = `${tmpName}.zip`;
    const tmpZipFilePath = join(tmpdir(), tmpZipFile);
    await this.makeZip(tmpDir, tmpZipFilePath);

    // 获取阿里云账号信息
    const fcClient = await this.get_fcclient();

    // 创建临时函数
    // 创建临时 servive
    const serviceName = `nodejs-pgo-${uuid.v1()}`;
    await fcClient.createService(serviceName, {
      description: '用于 Alinode Cloud Require Cache 生成',
    });

    const functionName = `dump-${uuid.v1()}`;

    console.log('PGO create tmp function...')
    // 创建函数
    await fcClient.createFunction(serviceName, {
      code: {
        zipFile: readFileSync(tmpZipFilePath, 'base64'),
      },
      description: '',
      functionName,
      handler: `${module}.alinode_pgo_dry_run`,
      initializer: `${module}.${initializerFun}`,
      memorySize: 1024,
      runtime: 'nodejs14',
      timeout: 300,
      initializationTimeout: 300,
      environmentVariables: {
        PGO_RECORD: 'true',
        NODE_ENV: 'development',
      },
    });

    // 移除临时文件
    // await remove(tmpDir);
    // await remove(tmpZipFilePath);

    console.log('PGO rrc downloading...')

    // 生成并下载 rrc 文件
    const buffer = await this.downloadArchive(serviceName, functionName);

    const pgorrc = join(this.options.codeUri, 'require_cache.strrc');
    await writeFile(pgorrc, buffer);

    // 清理
    this.tmpContext.service = serviceName
    this.tmpContext.function = functionName
    await this.cleanup_tmp_function()

    const nm = join(this.options.codeUri, 'node_modules');
    if (this.options.remove_node_modules && existsSync(nm)) {
      await remove(nm);
    }
    console.log('PGO Generated');
  }
}